/* * =BEGIN MIT LICENSE * * The MIT License (MIT) * * Copyright (c) 2014 The CrossBridge Team * https://github.com/crossbridge-community * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * * =END MIT LICENSE * */package crossbridge {import com.hurlant.crypto.hash.SHA256;import com.hurlant.util.Hex;import crossbridge.MCrypt.CModule;import flash.utils.ByteArray;public class CryptoPT {    private static const type:int = ClientLib.MHASH_SHA256;    private static const source:String = getTestText();    // optional property specifying the default number of iterations to run each test in the suite.    public var iterations:uint = 100;    // optional property specifying a description to be used when reporting on this test suite:    public var description:String = "Tests performance of Cryptography."    public var methods:Array = ["sha256FL", "sha256CB"];    public var methodLabels:Array = ["Flash", "CrossBridge"];    public function sha256FL():void {        var sha:SHA256 = new SHA256();        var bytes:ByteArray = new ByteArray();        bytes.writeMultiByte(source, "iso-8859-1")        var out:ByteArray = sha.hash(bytes);        out.position = 0;        var outputString:String = Hex.fromString(out.readMultiByte(out.length, "iso-8859-1"), false, "iso-8859-1");        if(!outputString) {            throw new Error("sha256FL Error");        }    }    public function sha256CB():void {        // makes things faster!        var cm:Object = CModule;        var outputPtr:int = cm.malloc(4);        var outputLengthPtr:int = cm.malloc(4);        ClientLib.ext_hash(type, source, outputPtr, outputLengthPtr);        var outputLength:int = cm.read32(outputLengthPtr);        var outputString:String = cm.readString(cm.read32(outputPtr), outputLength);        if(!outputString) {            throw new Error("sha256CB Error");        }        cm.free(outputPtr);        cm.free(outputLengthPtr);    }    private static function getTestText():String {        var result:String = "";        for (var i:int = 0; i < 1024; i++) {            result += String.fromCharCode(int(Math.random() * 256));        }        return result;    }}}