/* * =BEGIN MIT LICENSE * * The MIT License (MIT) * * Copyright (c) 2014 The CrossBridge Team * https://github.com/crossbridge-community * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * * =END MIT LICENSE * */package crossbridge {import crossbridge.MyLib.CModule;import flash.utils.ByteArray;import flash.utils.Endian;public class PassDataPT {    private static const bytes:ByteArray = getTestData();    private static const dataSize:uint = 1024 * 1024;    // optional property specifying the default number of iterations to run each test in the suite.    public var iterations:uint = 24;    // optional property specifying a description to be used when reporting on this test suite:    public var description:String = "Tests performance of ByteArray sum."    public var methods:Array = ["examineBytesFL", "examineBytesCB"];    public var methodLabels:Array = ["Flash", "CrossBridge"];    public function examineBytesFL():int {        bytes.position = 0;        var bufferSize:int = bytes.length;        var result:int = 0;        for (var i:int = 0; i < bufferSize; i++) {            result += bytes[i];        }        return result;    }    public function examineBytesCB():int {        bytes.position = 0;        var bufferSize:int = bytes.length;        var bytesPtr:int = CModule.malloc(bufferSize);        CModule.writeBytes(bytesPtr, bufferSize, bytes);        var result:int = MyLib.examineBytes(bytesPtr, bufferSize);        CModule.free(bytesPtr);        return result;    }    private static function getTestData():ByteArray {        var bytes:ByteArray = new ByteArray();        bytes.endian = Endian.LITTLE_ENDIAN;        for (var i:int = 0; i < dataSize; i++)            bytes.writeInt(i);        bytes.position = 0;        return bytes;    }}}